import React, { useEffect, useState } from "react";
import "../../style/DoctorProfile/DoctorProfile.scss";
import { getUserById } from "../../utils/AuthAPI/AdminService";
import { NavLink, useParams } from "react-router-dom";
import getScheduleDoctorById from "../../utils/SchedualAPI/SchedualService";
import { checkDoctorSchedule } from "../../utils/AppointmentAPI/AppointmentService";
import Cookies from "js-cookie";

const DoctorProfile = () => {
  const { doctorId } = useParams();
  const [doctor, setDoctor] = useState(null);
  const [schedule, setSchedule] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [bookedDates, setBookedDates] = useState([]);
  const [bookedSlots, setBookedSlots] = useState([]);
  const [bookedList, setBookedList] = useState([]);
  const patientId = Cookies.get("id");

  useEffect(() => {
    const fetchDoctor = async () => {
      const doctorData = await getUserById(doctorId, "doctor");
      setDoctor(doctorData);
    };

    const fetchSchedule = async () => {
      try {
        const scheduleData = await getScheduleDoctorById(doctorId);
        console.log(`Schedule`, scheduleData);
        setSchedule(scheduleData);
        setSelectedDate(scheduleData[0]?.date);
      } catch (error) {
        console.error("L·ªói khi l·∫•y l·ªãch l√†m vi·ªác:", error);
      }
    };

    const fetchBookedDates = async () => {
      try {
        const appointments = await checkDoctorSchedule(doctorId);
        setBookedList(appointments);
        if (Array.isArray(appointments)) {
          const dates = appointments.map((app) => app.appointment_date);
          setBookedDates(dates);

          const slots = appointments.flatMap((app) => app.time_slots || []);
          setBookedSlots(slots);
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y l·ªãch h·∫πn:", error);
      }
    };

    fetchDoctor();
    fetchSchedule();
    fetchBookedDates();
  }, [doctorId, patientId]);
  useEffect(() => {
    console.log("Updated Booked List:", bookedList); // Ki·ªÉm tra d·ªØ li·ªáu sau khi bookedList thay ƒë·ªïi
  }, [bookedList]);

  const handleDateClick = (date) => {
    setSelectedDate(date);
    console.log("Date clicked", date);
    setSelectedSlot(null);
  };

  const handleSlotClick = (slot) => {
    setSelectedSlot(slot);
    console.log("Slot clicked", slot);
  };

  const selectedDaySchedule = schedule?.find(
    (day) => day.date === selectedDate
  );

  const morningSlots = selectedDaySchedule?.available_slots.filter((slot) => {
    const hour = parseInt(slot.split(":")[0]);
    return hour < 12 && !bookedSlots.includes(slot);
  });

  const afternoonSlots = selectedDaySchedule?.available_slots.filter((slot) => {
    const hour = parseInt(slot.split(":")[0]);
    return hour >= 12 && !bookedSlots.includes(slot);
  });

  const formatDate = (dateString) => {
    const options = { weekday: "short", day: "2-digit", month: "2-digit" };
    return new Date(dateString).toLocaleDateString("vi-VN", options);
  };

  const isSlotBooked = (date, slot) => {
    return bookedDates.includes(date) && bookedSlots.includes(slot);
  };

  if (!doctor) {
    return <p>Loading...</p>;
  }

  return (
    <div className="doctor-profile">
      <div className="doctor-header">
        <div className="doctor-img">
          <img
            src={`data:image/jpeg;base64,${doctor.user.imageUrl}`}
            className="doctor-img"
            alt={`${doctor.user.first_name} ${doctor.user.last_name}`}
          />
        </div>
        <div className="doctor-info">
          <h2 className="doctor-name">
            {doctor.user.first_name} {doctor.user.last_name}
          </h2>
          <div className="doctor-details">
            <span className="doctor-title">B√°c sƒ©</span>
            <span className="doctor-experience">10 nƒÉm kinh nghi·ªám</span>
          </div>
          <div className="doctor-specialty">
            <span>Chuy√™n khoa: </span>
            <a href="#">{doctor.user.specialties}</a>
          </div>
        </div>
      </div>

      <div className="note-container">
        <div className="note-header">
          <span className="note-icon">‚ö†Ô∏è</span>
          <h3 className="note-title">L∆∞u √Ω</h3>
        </div>
        <p className="note-content">
          * N·∫øu b·ªánh nh√¢n b·∫≠n vi·ªác kh√¥ng ƒë·∫øn kh√°m ƒë∆∞·ª£c vui l√≤ng h·ªßy l·ªãch kh√°m ƒë√£
          ƒë·∫∑t v√† ƒë·∫∑t l·∫°i ng√†y kh√°c. Xin c·∫£m ∆°n!
        </p>
        <p className="note-content">
          * ƒê·∫∑t l·ªãch ph·∫£i tr∆∞·ªõc 4h so v·ªõi gi·ªù kh√°m. Xin c·∫£m ∆°n!
        </p>
      </div>

      <div className="quick-booking">
        <h3 className="section-title">ƒê·∫∑t kh√°m nhanh</h3>
        <div className="date-list">
          {schedule &&
            schedule.map((day, index) => {
              const isBooked = bookedDates.includes(day.date);
              return (
                <div
                  className="date-item"
                  key={index}
                  onClick={() => !isBooked && handleDateClick(day.date)}
                >
                  <span>{formatDate(day.date)}</span>
                  <span className="time-frame">
                    {day.available_slots.length} khung gi·ªù
                  </span>
                </div>
              );
            })}
        </div>

        <div className="time-slot-section">
          <div className="time-slot-title">
            <span role="img" aria-label="morning">
              üåÖ
            </span>{" "}
            Bu·ªïi s√°ng
          </div>
          <div className="time-slot-list">
            {morningSlots && morningSlots.length > 0 ? (
              morningSlots.map((slot, index) => (
                <button
                  className={`time-slot ${
                    selectedSlot === slot ? "selected" : ""
                  } ${isSlotBooked(selectedDate, slot) ? "disabled" : ""}`}
                  key={index}
                  onClick={() =>
                    !isSlotBooked(selectedDate, slot) && handleSlotClick(slot)
                  }
                  disabled={isSlotBooked(selectedDate, slot)} // Disable button if booked
                >
                  {slot}
                </button>
              ))
            ) : (
              <p>Kh√¥ng c√≥ khung gi·ªù n√†o v√†o bu·ªïi s√°ng.</p>
            )}
          </div>

          <div className="time-slot-title">
            <span role="img" aria-label="afternoon">
              üåá
            </span>{" "}
            Bu·ªïi chi·ªÅu
          </div>
          <div className="time-slot-list">
            {afternoonSlots && afternoonSlots.length > 0 ? (
              afternoonSlots.map((slot, index) => (
                <button
                  className={`time-slot ${
                    selectedSlot === slot ? "selected" : ""
                  } ${isSlotBooked(selectedDate, slot) ? "disabled" : ""}`}
                  key={index}
                  onClick={() =>
                    !isSlotBooked(selectedDate, slot) && handleSlotClick(slot)
                  }
                  disabled={isSlotBooked(selectedDate, slot)} // Disable button if booked
                >
                  {slot}
                </button>
              ))
            ) : (
              <p>Kh√¥ng c√≥ khung gi·ªù n√†o v√†o bu·ªïi chi·ªÅu.</p>
            )}
          </div>
        </div>
      </div>

      <div className="description">
        <h3>Gi·ªõi thi·ªáu</h3>
        <p>
          B√°c sƒ© Chuy√™n khoa II L√™ Th·ªã Minh H·ªìng hi·ªán ƒëang l√† Ph√≥ Gi√°m ƒë·ªëc B·ªánh
          vi·ªán Nhi ƒê·ªìng 2. B√°c sƒ© tr·ª±c ti·∫øp kh√°m b·ªánh theo y√™u c·∫ßu ch·∫•t l∆∞·ª£ng
          cao t·∫°i B·ªánh Vi·ªán Nhi ƒê·ªìng 2 v√† ph√≤ng kh√°m Nhi khoa (250 Nguy·ªÖn X√≠,
          Ph∆∞·ªùng 13, B√¨nh Th·∫°nh, TP.HCM).
        </p>
        <ul>
          <li>
            Kh√°m v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω Nhi khoa: ti√™u h√≥a, h√¥ h·∫•p, th·∫≠n,
            nhi·ªÖm, d·ªã ·ª©ng, tai m≈©i h·ªçng,...
          </li>
          <li>Kh√°m t∆∞ v·∫•n dinh d∆∞·ª°ng v√† ph√°t tri·ªÉn th·ªÉ ch·∫•t cho tr·∫ª em.</li>
          <li>
            Kh√°m v√† t∆∞ v·∫•n v·ªÅ s·ª©c kh·ªèe, ph√≤ng ng·ª´a b·ªánh cho tr·∫ª em v√† ph·ª• n·ªØ
            mang thai.
          </li>
          <li>
            Tham gia c√°c ch∆∞∆°ng tr√¨nh t√¨nh nguy·ªán, h∆∞·ªõng d·∫´n c√°ch chƒÉm s√≥c tr·∫ª
            s∆° sinh, tr·∫ª nh·ªè.
          </li>
        </ul>
      </div>

      <div className="booking-footer">
        <span className="support-text">
          H·ªó tr·ª£ ƒë·∫∑t kh√°m <strong>0935038810</strong>
        </span>
        <NavLink
          to={{
            pathname: `/dat-kham/ho-so-lich/${doctor.user._id}/${patientId}`,
          }}
          state={{
            doctor,
            selectedDate,
            selectedSlot,
          }}
        >
          <button className="book-now-button">ƒê·∫∑t kh√°m ngay</button>
        </NavLink>
      </div>
    </div>
  );
};

export default DoctorProfile;
